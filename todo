const express = require("express");
const app = express();
const path = require("path");
const dbPath = path.join(__dirname, "todoApplication.db");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
app.use(express.json());

let db = null;

const initializationDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server Running at http://localhost:3000/");
    });
  } catch (e) {
    console.log(`DB Error : ${e.message}`);
    process.exit(1);
  }
};

initializationDbAndServer();

const hasPriorityAndStatus = (object) => {
  return object.priority != undefined && object.status != undefined;
};

const onlyPriority = (object) => {
  return object.priority != undefined;
};

const onlyStatus = (object) => {
  return object.status != undefined;
};

// Returns a list of all todos whose status is 'TO DO'

app.get("/todos/", async (request, response) => {
  let data = null;
  const { search_q = "", priority, status } = request.query;
  let getQuery = "";
  switch (true) {
    case hasPriorityAndStatus(request.query):
      getQuery = `
            SELECT 
                 *
            FROM todo
            WHERE
                todo LIKE '%${search_q}%'
                AND status = '${status}'
                AND priority = '${priority}';`;
      break;
    case onlyPriority(request.query):
      getQuery = `
            SELECT 
                  *
            FROM
                todo
            WHERE
                todo LIKE '%${search_q}%'
                AND priority = '${priority}';`;
      break;
    case onlyStatus(request.query):
      getQuery = `
            SELECT 
                 *
            FROM
                todo
            WHERE 
                todo LIKE '%${search_q}%'
                AND status = '${status}';`;
      break;
    default:
      getQuery = `
            SELECT 
                *
            FROM
                todo
            WHERE
                todo LIKE '%${search_q}%';`;
  }
  data = await db.all(getQuery);
  response.send(data);
});

// Returns a specific todo based on the todo ID

app.get("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  const getTodoQuery = `
    SELECT
        *
    FROM
        todo
    WHERE 
        id = ${todoId};`;
  const todoListArray = await db.get(getTodoQuery);
  response.send(todoListArray);
});

//Create a todo in the todo table

app.post("/todos/", async (request, response) => {
  const { id, todo, priority, status } = request.body;
  const postQuery = `
    INSERT INTO
        todo (id,todo,priority,status)
    VALUES
        (${id},'${todo}','${priority}','${status}');`;
  const postArray = await db.run(postQuery);
  response.send("Todo Successfully Added");
});

//put
app.put("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  let updateColumn = "";
  const requestBody = request.body;
  switch (true) {
    case requestBody.status != undefined:
      updateColumn = "Status";
      break;
    case requestBody.priority != undefined:
      updateColumn = "Priority";
      break;
    case requestBody.todo != undefined:
      updateColumn = "todo";
      break;
  }
  const previousToDoQuery = `
      SELECT
        *
      FROM
        todo
      WHERE
        id = ${todoId};`;
  const previousTodo = await db.get(previousToDoQuery);
  const {
    todo = previousTodo.todo,
    priority = previousTodo.priority,
    status = previousTodo.status,
  } = request.body;

  const updateToDoQuery = `
    UPDATE
       todo
    SET
       todo = '${todo}',
       priority = '${priority},
       status = '${status}'
    WHERE
       id = ${todoId};`;
  await db.run(updateColumn);
  response.send(`${updateColumn} Updated`);
});
//delete

app.delete("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  const deleteQuery = `
    DELETE FROM
       todo
    WHERE 
       id = ${todoId};`;
  await db.run(deleteQuery);
  response.send("Todo Deleted");
});

module.exports = app;
